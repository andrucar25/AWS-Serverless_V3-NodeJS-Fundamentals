import { Get } from "json-schema-to-ts/lib/utils";
import { MetaType, Never, Arr, Error } from "json-schema-to-ts/lib/meta-types";
import { Values } from "json-schema-to-ts/lib/meta-types/array";
import { IntersectConst } from "json-schema-to-ts/lib/meta-types/intersection/const";
import { IntersectEnum } from "json-schema-to-ts/lib/meta-types/intersection/enum";
import { IntersectTuple } from "json-schema-to-ts/lib/meta-types/intersection/tuple";
import { IntersectUnion } from "json-schema-to-ts/lib/meta-types/intersection/union";
import { IntersectExclusion } from "json-schema-to-ts/lib/meta-types/intersection/exclusion";
import { ClearIntersections, Intersect } from "json-schema-to-ts/lib/meta-types/intersection";
export declare type ClearArrIntersections<A> = Arr<ClearIntersections<Values<A>>>;
export declare type IntersectArr<A, B> = {
    any: A;
    never: Never;
    const: IntersectConst<B, A>;
    enum: IntersectEnum<B, A>;
    primitive: Never;
    array: IntersectArrs<A, B>;
    tuple: IntersectTuple<B, A>;
    object: Never;
    union: IntersectUnion<B, A>;
    exclusion: IntersectExclusion<B, A>;
    intersection: Error<"Cannot intersect intersection">;
    error: B;
    errorTypeProperty: Error<"Missing type property">;
}[Get<B, "type"> extends MetaType ? Get<B, "type"> : "errorTypeProperty"];
declare type IntersectArrs<A, B, I = Intersect<Values<A>, Values<B>>> = I extends Never ? Never : Arr<I>;
export {};

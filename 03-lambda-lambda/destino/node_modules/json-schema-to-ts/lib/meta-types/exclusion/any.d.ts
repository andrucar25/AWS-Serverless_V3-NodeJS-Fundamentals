import { Get } from "json-schema-to-ts/lib/utils";
import { MetaType, Never, Error } from "json-schema-to-ts/lib/meta-types";
import { ExcludeUnion } from "json-schema-to-ts/lib/meta-types/exclusion/union";
import { ExcludeIntersection } from "json-schema-to-ts/lib/meta-types/exclusion/intersection";
import { ExcludeExclusion } from "json-schema-to-ts/lib/meta-types/exclusion/exclusion";
export declare type ExcludeFromAny<Source, Excluded> = {
    any: Never;
    never: Source;
    const: Source;
    enum: Source;
    primitive: Source;
    array: Source;
    tuple: Source;
    object: Source;
    union: ExcludeUnion<Source, Excluded>;
    intersection: ExcludeIntersection<Source, Excluded>;
    exclusion: ExcludeExclusion<Source, Excluded>;
    error: Excluded;
    errorTypeProperty: Error<"Missing type property">;
}[Get<Excluded, "type"> extends MetaType ? Get<Excluded, "type"> : "errorTypeProperty"];

import { Get } from "json-schema-to-ts/lib/utils";
import { MetaType } from "json-schema-to-ts/lib/meta-types";
import { IsEnumRepresentable } from "json-schema-to-ts/lib/meta-types/enum";
import { IsTupleRepresentable } from "json-schema-to-ts/lib/meta-types/tuple";
import { IsObjectRepresentable } from "json-schema-to-ts/lib/meta-types/object";
import { IsUnionRepresentable } from "json-schema-to-ts/lib/meta-types/union";
import { IsIntersectionRepresentable } from "json-schema-to-ts/lib/meta-types/intersection";
import { IsExclusionRepresentable } from "json-schema-to-ts/lib/meta-types/exclusion";
export declare type IsRepresentable<A> = {
    any: true;
    never: false;
    const: true;
    enum: IsEnumRepresentable<A>;
    primitive: true;
    array: true;
    tuple: IsTupleRepresentable<A>;
    object: IsObjectRepresentable<A>;
    union: IsUnionRepresentable<A>;
    intersection: IsIntersectionRepresentable<A>;
    exclusion: IsExclusionRepresentable<A>;
    error: false;
    errorMissingType: false;
}[Get<A, "type"> extends MetaType ? Get<A, "type"> : "errorMissingType"];

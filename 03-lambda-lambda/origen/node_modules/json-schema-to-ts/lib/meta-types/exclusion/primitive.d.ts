import { Get } from "json-schema-to-ts/lib/utils";
import { MetaType, Never, Error } from "json-schema-to-ts/lib/meta-types";
import { Value } from "json-schema-to-ts/lib/meta-types/primitive";
import { ExcludeUnion } from "json-schema-to-ts/lib/meta-types/exclusion/union";
import { ExcludeIntersection } from "json-schema-to-ts/lib/meta-types/exclusion/intersection";
import { ExcludeExclusion } from "json-schema-to-ts/lib/meta-types/exclusion/exclusion";
export declare type ExcludeFromPrimitive<A, B> = {
    any: Never;
    never: A;
    const: A;
    enum: A;
    primitive: Value<A> extends Value<B> ? Never : A;
    array: A;
    tuple: A;
    object: A;
    union: ExcludeUnion<A, B>;
    intersection: ExcludeIntersection<A, B>;
    exclusion: ExcludeExclusion<A, B>;
    error: B;
    errorTypeProperty: Error<"Missing type property">;
}[Get<B, "type"> extends MetaType ? Get<B, "type"> : "errorTypeProperty"];

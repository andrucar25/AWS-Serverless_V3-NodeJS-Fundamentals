import { Get } from "json-schema-to-ts/lib/utils";
import { Any, AnyType, ResolveAny } from "json-schema-to-ts/lib/meta-types/any";
import { Never, NeverType, ResolveNever } from "json-schema-to-ts/lib/meta-types/never";
import { Const, ConstType, ResolveConst } from "json-schema-to-ts/lib/meta-types/const";
import { Enum, EnumType, ResolveEnum } from "json-schema-to-ts/lib/meta-types/enum";
import { Primitive, PrimitiveType, ResolvePrimitive } from "json-schema-to-ts/lib/meta-types/primitive";
import { Arr, ArrType, ResolveArr } from "json-schema-to-ts/lib/meta-types/array";
import { Tuple, TupleType, ResolveTuple } from "json-schema-to-ts/lib/meta-types/tuple";
import { Object, ObjectType, ResolveObject } from "json-schema-to-ts/lib/meta-types/object";
import { Union, UnionType, ResolveUnion } from "json-schema-to-ts/lib/meta-types/union";
import { Intersection, IntersectionType, ResolveIntersection } from "json-schema-to-ts/lib/meta-types/intersection";
import { Error, ErrorType } from "json-schema-to-ts/lib/meta-types/error";
import { Exclusion, ExclusionType, ResolveExclusion } from "json-schema-to-ts/lib/meta-types/exclusion";
export declare type MetaType = AnyType | NeverType | ConstType | EnumType | PrimitiveType | ArrType | TupleType | ObjectType | UnionType | IntersectionType | ExclusionType | ErrorType;
export declare type Resolve<T, D = Exclude<T, undefined>> = {
    any: ResolveAny;
    never: ResolveNever;
    const: ResolveConst<D>;
    enum: ResolveEnum<D>;
    primitive: ResolvePrimitive<D>;
    array: ResolveArr<D>;
    tuple: ResolveTuple<D>;
    object: ResolveObject<D>;
    union: ResolveUnion<D>;
    intersection: ResolveIntersection<D>;
    exclusion: ResolveExclusion<D>;
    error: never;
}[Get<D, "type"> extends MetaType ? Get<D, "type"> : "error"];
export { Any, Never, Const, Enum, Primitive, Arr, Tuple, Object, Union, Intersection, Exclusion, Error, };

import { Primitive, Any, Never } from "json-schema-to-ts/lib/meta-types";
import { ParseConstSchema } from "json-schema-to-ts/lib/parse-schema/const";
import { ParseEnumSchema } from "json-schema-to-ts/lib/parse-schema/enum";
import { ParseMixedSchema } from "json-schema-to-ts/lib/parse-schema/mixed";
import { ParseArrSchema } from "json-schema-to-ts/lib/parse-schema/array";
import { ParseObjectSchema } from "json-schema-to-ts/lib/parse-schema/object";
import { ParseAnyOfSchema } from "json-schema-to-ts/lib/parse-schema/anyOf";
import { ParseOneOfSchema } from "json-schema-to-ts/lib/parse-schema/oneOf";
import { ParseAllOfSchema } from "json-schema-to-ts/lib/parse-schema/allOf";
import { ParseNotSchema } from "json-schema-to-ts/lib/parse-schema/not";
import { ParseIfThenElseSchema } from "json-schema-to-ts/lib/parse-schema/ifThenElse";
export declare type ParseSchema<S> = {
    any: Any;
    never: Never;
    null: Primitive<null>;
    boolean: Primitive<boolean>;
    number: Primitive<number>;
    string: Primitive<string>;
    mixed: ParseMixedSchema<S>;
    object: ParseObjectSchema<S>;
    array: ParseArrSchema<S>;
    const: ParseConstSchema<S>;
    enum: ParseEnumSchema<S>;
    anyOf: ParseAnyOfSchema<S>;
    oneOf: ParseOneOfSchema<S>;
    allOf: ParseAllOfSchema<S>;
    not: ParseNotSchema<S>;
    ifThenElse: ParseIfThenElseSchema<S>;
}[InferSchemaType<S>];
declare type InferSchemaType<S> = S extends true | string ? "any" : S extends false ? "never" : "if" extends keyof S ? "ifThenElse" : "not" extends keyof S ? "not" : "allOf" extends keyof S ? "allOf" : "oneOf" extends keyof S ? "oneOf" : "anyOf" extends keyof S ? "anyOf" : "enum" extends keyof S ? "enum" : "const" extends keyof S ? "const" : "type" extends keyof S ? S["type"] extends any[] ? "mixed" : S["type"] extends "null" ? "null" : S["type"] extends "boolean" ? "boolean" : S["type"] extends "integer" | "number" ? "number" : S["type"] extends "string" ? "string" : S["type"] extends "object" ? "object" : S["type"] extends "array" ? "array" : "never" : "any";
export {};
